@startuml



rectangle "== Ideas Storage for **pumla**\n <i>-sticky note board- " {

note as n1
   **Idea:** handle tagged values to model
   elements as a table in a note like this:

  |= Tag |= Value |
  | ElementID | 1A75FE |
  | RelatedUseCaseID | 27A |

  Tagged values with macros like
  done in C4model extension
end note

note right of n1 #back:lightGreen : **DONE**

note as n2
**Idea:** show "parent" structure as tree
as a note like this with a macro call
for the whole repo:

Example of Tree
|_ First line
|_ **Bom (Model)**
|_ prop1
  |_ hu
  |_ ha
|_ prop2
|_ prop3
|_ Last line
end note

note as n3
**Idea**: make a macro to show a list of
elements and their alias as table. That
was the developers and architects can
easily use **pumla** to create themselves
**cheat-sheets**.
end note
note right of n3 #back:lightGreen : **DONE**

note as n4
**Idea:** Use the possibility to read JSON
structures from within .puml files in order
to provide the macros with all information
of the model repository. So the macros
basically read out the JSON puml that holds
the model repository. This JSON puml is
generated by the **pumla** command line
python script that scans and parses the
complete source code repo for pumla files.
end note

note right of n4 #back:lightGreen : **DONE**

note as n5
**Idea:** Use modelling guidelines for
- enabling the possibility of single source usage
  - atomic model element descriptions
  - usage of common variables to enable/disable content
  - keep layouting out of model elements so that it
    can be done later and different for each diagram
- simplifying the scanning through the source code
  repository and parsing the pumla files
end note

note right of n5 #back:lightGreen : **DONE**

note as n6
**Idea:** Provide templates for atomic model element
descriptions

This may require to provide different templates for e.g. for
- SysML
- C4model
- UML

Yet unclear.
end note

note as n7
**Idea:** keep track of a common diagrams repo
and a common dynamic behaviour descriptions.
Also define how the relations are managed...
... yet unclear.
end note

note as n8
**Idea:** Macro to gather all repo-diagrams and put them
into one single MD as overview. Repo-diagrams with 'PUMLADR.
That separation between diagram and model element description
is important as in PlantUML everything is a diagram.
end note

note as n9
**Idea:** Make the python script generate a frame for an arc42
report in which diagrams from the model and diagram repo are included
automatically.
end note

note as n10
**Idea:** Make an "InjectIntoElement(elem, targetParenteElem)" so
that you can later decide when deploying how things are embedded.
So modularity on nesting/embedding elements.
end note

note right of n10 #back:lightGreen : **DONE**

note as n11
**Idea:** Create instantiation mechanism for pumla model repo
elements, so the same element can appear as 2 instances
on the same diagram.
end note
note right of n11 #back:lightGreen : **DONE**

note as n12
**Idea:** Hide/Remove macros for elements
- with defined tag/value pair
- with defined stereotype

PutAllElementsWith property for
- defined tag/value pair
- defined stereotype
- defined type
end note
note right of n12 #back:lightGreen : **DONE: Filters**

note as n13 #lightgreen
**Idea:** Blacklist of directories that shall not be scanned by pumla,
e.g. where templates are stored.
end note

note right of n13 #back:lightGreen : **DONE**

note as n14
Different handling of tagged values (like relations and connections), so
that the information is stored in the database and can be used for
filtering. So you can Put elements on the diagram based on
concrete values of the tagged values.

Inheritance concept for tagged values.
end note
note right of n14 #back:lightGreen : **DONE**

note as n15
inheritance of methods from classes for instances?
end note
note right of n15 #back:lightGreen : **DONE**

note as n16 #lightgreen
Pre-update python hook to provide the basic model elements
for the source code repo, like creating re-usable elements
for the modules, classes and files.

> this will be done in a separate project, see here:
== https://github.com/DrMarkusVoss/py2pumla

Therefore seen as "done" here.
end note
note right of n16 #back:lightGreen : **DONE**

note as n17
use packages to organize the model repository content.
make cheat sheets for packages overview and cheat sheet
per package.
end note

note as n18
introduce "extension point macros" that allow to extend
a re-usable element description at defined points. That could
be useful for e.g. sequence diagrams, when you have a re-usable
element that has a hook call in it, and you want to fill in
the right hook in different versions for dedicated diagrams to
have a complete view of the sequence, not a broken one with
additional documentation that explains how the broken one
will work if it is filled by another document.
end note


note as n19
Interfaces as part of the model repository, so you can have
an overview of your interfaces. Also be able to put tagged
values to interfaces, so you can filter and search for defined
interfaces.

Convenience macro to put elements onto diagram that use or have
a certain interface.
end note
}
@enduml
