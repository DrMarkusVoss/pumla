'PUMLAMR
'PUMLAPARENT: -
' in the line above, replace the "-" with a
' parent alias if this es a child element that
' shall be nested into the parent.

@startuml
' adopt path if necessary or put the path to pumla
' into your include path
!include ./../../pumla_macros.puml

' following include only needed if tagged values
' are used
!include ./../../pumla_tagged_values.puml

' add atomic model element definition with
' internals here, e.g.:
rectangle "Element Name" <<block>> as element_alias {

'if the element has tagged values defined above, just uncomment
'the following line:
PUMLAPutTaggedValues(element_alias)

!if ($PUMVarShowBodyInternals)
' add some internal elements here, like this:
[internal element]
[another internal element]

' "aggregating" its children, meaning others
' can add internals without changing this definition
' then.
' if that kind of aggregation is not used
' the following line can be deleted
' (the name in the brackets must of course be adapted
'  to the alias of the real element)
PUMLAInjectChildElements(element_alias)
!endif

' putting another internal element from
' model repo into the internals of this element.
PUMLAPutInternalElement(tempSensorA)
}

PUMLAAddTaggedValue(element_alias, "Vendor", "XY")
PUMLAAddTaggedValue(element_alias, "SecurityClass", "Alpha")
PUMLAAddTaggedValue(element_alias, "Frequency Range", "5 GHz")

'add interface connections here
' the interface alias should be <interface_name>_<modelelement_alias>
PUMLAInterface("some_interface", some_interface_element_alias, element_alias, "in")

!if ($PUMVarShowDescr)
'add description note to the block here, e.g.
note bottom of element_alias
    Re-usable element description.
end note
!endif

@enduml
