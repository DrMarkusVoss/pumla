@startuml
!include modelrepo_json.puml
!include pumla_macros.puml
!include ./../../templates/sysml/skin.puml

' the "true" variables are not really needed
' on your diagram description here.
' they are just put in nearly every example
' so that you can play with switching them
' to false to see what happens.
' so, the real-life overhead is much less.
!$PUMVarShowDescr = %true()
!$PUMVarShowInterfaces = %false()
!$PUMVarShowBody = %true()
!$PUMVarShowBodyInternals = %true()
!$PUMVarShowTaggedValues = %true()
' the following must be true to see the
' instantiation relation
!$PUMVarShowInstantiationRel = %true()
!$PUMVarShowImplicitRels = %true()

title Mixing classes and other elements from Model Repository

' if you want to mix classes and other elements
' on a diagram you need to do this:
allowmixing

' put all classes onto this diagram
' which becomes a class diagram with that
'PUMLAPutAllClasses()

PUMLAPutElement("CWeather")

PUMLAPutElement("w2")

PUMLAPutElement("w1")

PUMLAPutElement("w3")

PUMLAPutElement("w4")

' make the instantiation relations visible
' make sure that the corresponding global
' variable is set to true
PUMLAPutRelationsForElement(CWeather)

' if you want to show the internals
' and mix with other non-class elements,
' you need to allow mixing in order not
' to get an error (this is a PlantUML approach,
' not pumla). Still, elements like "[some comp]"
' will lead to a PlantUML error, therefore
' you can only interact with re-usable elements
' that include such definitions in their internals
' by blending out the internals first.
!$PUMVarShowBodyInternals = %false()
PUMLAPutElement(tempSys)
!$PUMVarShowBodyInternals = %true()


tempSys .. CWeather : somehow related

@enduml
